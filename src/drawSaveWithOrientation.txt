  mainPathVertical(x = this.x, y = this.y, currentQuad = 0) {
    const quarterSize = this.size / 4
    let endX, endY
    gridContext.beginPath()
    if (this.orientation === 'right') {
      gridContext.moveTo(x, y)
      if (random() < 0.3) {
        endX = x + quarterSize
        endY = y + quarterSize
      } else {
        endX = x
        endY = y + quarterSize
      }
    } else {
      // 'left' orientation
      gridContext.moveTo(x, y)
      if (random() < 0.3) {
        endX = x - quarterSize
        endY = y + quarterSize
      } else {
        endX = x
        endY = y + quarterSize
      }
    }
    gridContext.lineTo(endX, endY)
    gridContext.lineWidth = lineWidth
    gridContext.stroke()
    currentQuad++
    if (currentQuad <= 3) {
      this.mainPathVertical(endX, endY, currentQuad)
    }
  }

  mainPathHorizontal(x = this.x, y = this.y, currentQuad = 0) {
    const quarterSize = this.size / 4
    let endX, endY
    gridContext.beginPath()
    if (this.orientation === 'right') {
      gridContext.moveTo(x, y)
      if (random() < 0.2) {
        endX = x + quarterSize
        endY = y + quarterSize
      } else {
        endX = x + quarterSize
        endY = y
      }
    } else {
      // 'left' orientation
      gridContext.moveTo(x, y)
      if (random() < 0.2) {
        endX = x - quarterSize
        endY = y + quarterSize
      } else {
        endX = x - quarterSize
        endY = y
      }
    }
    gridContext.lineTo(endX, endY)
    gridContext.lineWidth = lineWidth
    gridContext.stroke()
    currentQuad++
    if (currentQuad <= 3) {
      this.mainPathHorizontal(endX, endY, currentQuad)
    }
  }
}